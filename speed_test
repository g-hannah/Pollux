#!/bin/bash

##############################################################################################
##############################################################################################
## When testing a change in the code, copy pollux.c to pollux0.c and compile as pollux0     ##
## Then this speed test will compare the original and the test version. Start off at	    ##
## 1000 files in each folder (0 - 9) and then double after each iteration (4 iterations).   ##
## 1/3 are identical to one another, another 1/4 are identical to each other, and then	    ##
## another 1/5 are identical to each other; the rest contain a random number using	    ##
## ${RANDOM}. A high percentage of the random files have the same sizes as one another;	    ##
## this results in a lot of comparisons to see if they are indeed duplicate files. It is    ##
## this that can be the bottleneck of the program.					    ##
##											    ##
## An external 1TB HDD that was used for testing also contained thousands of .AWR files and ##
## .xmp files, a huge percentage of which were all the same size as one another but	    ##
## were not duplicates. This resulted in the scan taking so long that it had to be	    ##
## cancelled. The lastest scan took 1 hour and 42 minutes.				    ##
##											    ##
## The test files created here are meant to replicate this (lots of duplicate files and     ##
## also lots of non-duplicates of the same size as one another)				    ##
##############################################################################################
##############################################################################################

function remove_leftovers()
{
	echo "Removing any leftover test files..."
	cd "./TESTING"

	y=0
	while [[ $y -lt 10 ]]; do
		cd "${PWD}/$y"
		while read -r FILE; do
			rm "${FILE}"
		done < <(find . -maxdepth 1 -type f -name '*')

		cd "../"
		y=$(( $y + 1 ))
	done

	cd "../"
}

function create_files()
{
	echo "Creating ${NUM_FILES} files in 10 folders..."

	cd "./TESTING"

	y=0
	while [[ $y -lt 10 ]]; do
		cd "${PWD}/$y"
		i=0
		while [[ $i -lt ${NUM_FILES} ]]; do
			if [[ $i -eq 0 ]]; then
				echo "${RANDOM}" > "${RANDOM}.txt"
			elif [[ $(( $i % 3 )) -eq 0 ]]; then
				echo "abcdefg" > "${RANDOM}.txt"
			elif [[ $(( $i % 4 )) -eq 0 ]]; then
				echo "bcdefgh" > "${RANDOM}.txt"
			elif [[ $(( $i % 5 )) -eq 0 ]]; then
				echo "cdefgh" > "${RANDOM}.txt"
			else
				echo "${RANDOM}" > "${RANDOM}.txt"
			fi
			i=$(( $i + 1 ))
		done

		cd "../"
		y=$(( $y + 1 ))
	done

	cd "../"

	TOTAL_FILES=$(( ${NUM_FILES} * 10 ))
	echo;
	echo -en "+++ Speed test for \e[38;5;9m${1}\e[m: ${TOTAL_FILES} total files +++"
}

[[ ! -e "${PWD}/pollux0" ]] && echo "*** pollux0 does not exist ***" && exit 1
[[ ! -e "${PWD}/TESTING" ]] && mkdir "${PWD}/TESTING"

if [[ ! -e "${PWD}/TESTING/0" ]]; then
	k=0
	while [[ $k -lt 10 ]]; do
		mkdir "${PWD}/TESTING/$k"
		k=$(( $k + 1 ))
	done
fi

z=0
NUM_FILES=1000
while [[ $z -lt 4 ]]; do
	if [[ $z -gt 0 ]]; then
		echo; echo;
	fi
	remove_leftovers
	create_files "pollux"
	time "./pollux" "./TESTING" "--quiet"

	echo; echo;
	remove_leftovers
	create_files "pollux0"
	time "./pollux0" "./TESTING" "--quiet"

	NUM_FILES=$(( $NUM_FILES * 2 ))
	z=$(( $z + 1 ))
done

echo; echo;
remove_leftovers
